%% Script Initialisation
% Reset the project to default state
clear;clc;close
% Add the dependencies to the project path relative to the project folder
addpath('Functions')
addpath('AudioSamples')
%% Signal Generation
% Signal types should include various crest factors, THD, THD+n, levels,
% dBSNR, stereo image, etc...
% etc...
% Create a function that performs the convolution process and creates
% pre-processed and post-processed measurements as stated above. 
% This will allow an ideal way of comparing measurement values.

fs = 48000;

% Varying signal lengths
impulsive = .01;    % Signal length of 10ms
short = .1;         % Signal length of 100ms
long = 1;           % Signal length of 1s

x1 = linSineSweep(0, 22000, .75, 1, impulsive, fs);  % Chirp
x2 = linSineSweep(0, 22000, .75, 1, short, fs);      % Chirp
x3 = linSineSweep(0, 22000, .75, 1, long, fs);       % Chirp
x4 = linSineSweep(0, 22000, .75, 1, 10, fs);         % Chirp
% x4 = GenerateNoise(1, 1, 1, fs);            % Noise signal

[guitarM, guitarS] = midSideEncode(audioread("AudioSamples/Guitar.wav"));
% [guitarReversedM, guitarReversedS] = midSideEncode(audioread("AudioSamples/reverseGuitar.wav"));
% guitarReversedM = [guitarReversedM(.25*length(guitarReversedM):end, :); guitarReversedM(1:.25*length(guitarReversedM)-1, :)];
% guitarReversedS = [guitarReversedS(.25*length(guitarReversedS):end, :); guitarReversedS(1:.25*length(guitarReversedS)-1, :)];

%% Signal Processing
% The process of overlaying the impulse response on top of the input stream
% of impulses x(n) and adding up the results to get the final time domain output y(n) is called convolution.
% Convolution obeys the commutative property in that x1(n) * x2(n) == 2(n) * x1(n).
% Cross-correlation is similar to convolution except one of the signals
% is not reversed

% y1 = conv(guitarM, x1, 'same'); % Impulsive   
% y2 = conv(guitarM, x2, 'same'); % Short
% y3 = conv(guitarM, x3, 'same'); % Long
% y4 = conv(guitarM, x4, 'same'); % 10 seconds

% If the first signal in the convolution process is shorter then use the
% 'full' shape option. This will sound the same as the code above.
% MATLAB's built in conv function doesn't solve for one vector being
% shorted than the other so either write your own or just use the shorter
% signal on the left side as the default.
y1 = conv(guitarM, x1, 'full'); % Impulsive   
y2 = conv(guitarM, x2, 'full'); % Short
y3 = conv(guitarM, x3, 'full'); % Long
y4 = conv(guitarM, x4, 'full'); % 10 seconds

% Calculate gain differences here
[data, idx] = max(abs(guitarM));
maxGuitardBFS = 20*log10(data/1);
[datay1, idxy1] = max(abs(y1));
maxy1dBFS = 20*log10(datay1/1);
y1GainDiff = maxy1dBFS - maxGuitardBFS;
[datay2, idxy2] = max(abs(y2));
maxy2dBFS = 20*log10(datay2/1);
y2GainDiff = maxy2dBFS - maxGuitardBFS;
[datay3, idxy3] = max(abs(y3));
maxy3dBFS = 20*log10(datay3/1);
y3GainDiff = maxy3dBFS - maxGuitardBFS;
[datay4, idxy4] = max(abs(y4));
maxy4dBFS = 20*log10(datay4/1);
y4GainDiff = maxy4dBFS - maxGuitardBFS;

% Normalise the gain across y1-3
y1 = y1*10^(-y1GainDiff/20);
y2 = y2*10^(-y2GainDiff/20);
y3 = y3*10^(-y3GainDiff/20);
y4 = y4*10^(-y4GainDiff/20);

% Export the audio
audiowrite('AudioSamples/guitar+sineSweep10ms.wav', y1, fs, 'BitsPerSample',24);
audiowrite('AudioSamples/guitar+sineSweep100ms.wav', y2, fs, 'BitsPerSample',24);
audiowrite('AudioSamples/guitar+sineSweep1s.wav', y3, fs, 'BitsPerSample',24);
audiowrite('AudioSamples/guitar+sineSweep10s.wav', y4, fs, 'BitsPerSample',24);

% We get cleaner sounding results with results closer to impulse responses
% Here comes the idea of extracting impulse responses from signals using
% frequency sampling. Could we use this method for creating
% 'pseudo-anechoic' frequency response filters, i.e. filters which transfer
% the timbre of a room rather than the time domain characteristics.
% There is a pretty linear relationship between the length of signals and
% the amount of increased gain that appears during convolution

% The closer the signals are in length the less 'stable' the product of
% convolution seems to be. Longer signals will cause more time stretching
% to occur

% With the length of part 'a' of the convolution increasing in length by an
% order of magnitude, the gain of the signal increases initially by
% ~18.8dBfs times the original, with the longer signals increasing by ~11.5dBfs.

% Because of the signals being offset we're starting to lose the beginning
% of the longer signal.

%% Signal Analysis
% Time domain plots
% Subplots [aImpulse(t) aShort(t) aLong(t);
%           aImpulse(f) aShort(f) aLong(f);
%           bImpulse(t) bShort(t) bLong(t);
%           bImpulse(f) bShort(f) bLong(f);
%           yImpulse(t) yShort(t) yLong(t);
%           yImpulse(f) yShort(f) yLong(f)]

% B signals in the time domain
subplot(6, 3, 1)
plot(x1)
title("Impulsive Linear Sine Sweep (Time Domain)")
xlabel("Time (Seconds)")
ylabel("Magnitude")
ylim([-1 1])
subplot(6, 3, 2)
plot(x2)
title("Short Linear Sine Sweep (Time Domain)")
xlabel("Time (Seconds)")
ylabel("Magnitude")
ylim([-1 1])
subplot(6, 3, 3)
plot(x3)
title("Long Linear Sine Sweep (Time Domain)")
xlabel("Time (Seconds)")
ylabel("Magnitude")
ylim([-1 1])
% B signals in the frequency domain
subplot(6, 3, 4)
plot(linspace(0, fs, length(x1)), smoothdata(log(abs(fft(x1)))));
title("Impulsive Linear Sine Sweep (Frequency Domain)")
xlabel("Frequency (Hz)")
ylabel("Magnitude")
xlim([20 20000]);
subplot(6, 3, 5)
plot(linspace(0, fs, length(x2)), smoothdata(log(abs(fft(x2)))));
title("Short Linear Sine Sweep (Frequency Domain)")
xlabel("Frequency (Hz)")
ylabel("Magnitude")
xlim([20 20000]);
subplot(6, 3, 6)
plot(linspace(0, fs, length(x3)), smoothdata(log(abs(fft(x3)))));
title("Long Linear Sine Sweep (Frequency Domain)")
xlabel("Frequency (Hz)")
ylabel("Magnitude")
xlim([20 20000]);
% A signal in the time domain
subplot(6, 3, 7:9)
plot(guitarM)
title("Unprocessed Guitar Sample (Time Domain)")
xlabel("Time (Seconds)")
ylabel("Magnitude")
ylim([-.5 .5])
% A signal in the frequency domain
subplot(6, 3, 10:12)
plot(linspace(0, fs, length(guitarM)), smoothdata(log(abs(fft(guitarM)))));
title("Unprocessed Guitar Sample (Frequency Domain)")
xlabel("Frequency (Hz)")
ylabel("Magnitude")
xlim([20 20000]);
% Y signals in the time domain
subplot(6, 3, 13)
plot(y1)
ylim([-.5 .5])
subplot(6, 3, 14)
plot(y2)
ylim([-.5 .5])
subplot(6, 3, 15)
plot(y3)
hold on
plot(-abs(y3))
hold off
ylim([-.5 .5])
% Y signals in the frequency domain
subplot(6, 3, 16)
plot(linspace(0, fs, length(y1)), smoothdata(log(abs(fft(y1)))));
xlim([20 20000]);
subplot(6, 3, 17)
plot(linspace(0, fs, length(y2)), smoothdata(log(abs(fft(y2)))));
xlim([20 20000]);
subplot(6, 3, 18)
plot(linspace(0, fs, length(y3)), smoothdata(log(abs(fft(y3)))));
xlim([20 20000]);